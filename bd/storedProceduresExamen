CREATE OR REPLACE FUNCTION  sp_login(usernameP text, passwordP text) RETURNS INTEGER AS $$
   BEGIN
		if exists(SELECT * FROM TableUser where username = usernameP and password = passwordP) then
            return (select rol from TableUser where username = usernameP);
      	else
        	return -1;
        end if;
   END;
$$ LANGUAGE 'plpgsql'


-- ////////////////////////////////////// USER ///////////////////////////////////////////////////////////


CREATE FUNCTION  sp_addUser(usernameP text, passwordP text, rolP integer, activeP integer) RETURNS INTEGER AS $$
   BEGIN
   		if exists(SELECT * FROM TableUser where username = usernameP) then
            return 0;
      	else
            insert into TableUser(username, password, rol, active) values(usernameP, passwordP, rolP, activeP);
        	return 1;
        end if;
   END;
$$ LANGUAGE 'plpgsql';

CREATE FUNCTION  sp_updateUser(usernameP text, passwordP text, rolP integer) RETURNS INTEGER AS $$  
   BEGIN
   		if exists(SELECT * FROM TableUser where username = usernameP) then
            update  TableUser set rol = rolP, password = passwordP where username = usernameP;
            return 1;
      	else
        	return 0;
        end if;
   END;
$$ LANGUAGE 'plpgsql';

CREATE FUNCTION  sp_disableUser(usernameP text) RETURNS VOID AS $$ 
   BEGIN
   		update  TableUser set active = 0 where username = usernameP;
   END;
$$ LANGUAGE 'plpgsql';
 

CREATE OR REPLACE FUNCTION  sp_getUsers()
RETURNS SETOF TableUser AS $$
   BEGIN
		RETURN QUERY SELECT * FROM TableUser where active = 1;
   END; $$
LANGUAGE 'plpgsql';


-- ////////////////////////////////////// CLIENT ////////////////////////////////////////////////////////



CREATE OR REPLACE FUNCTION sp_addClient(idNumberP integer, nameP text, lastnameP text, birthP text, directionP text, statusP text, genderP integer, discountP float) RETURNS integer AS $$
	BEGIN
    	if exists(SELECT * FROM Client where idNumber = idNumberP) then  
        	return 0;
        else
        	insert into Client(idNumber, name, lastName, birth, direction, status, gender, register, discount, active) 
            values(idNumberP, nameP, lastNameP, birthP, directionP, statusP, genderP, current_date, discountP, 1);
            return 1;
       end if;
    END;
$$ LANGUAGE 'plpgsql'; 

CREATE OR REPLACE FUNCTION  sp_getClients()
RETURNS SETOF Client AS $$
   BEGIN
		RETURN QUERY SELECT * FROM Client where active = 1;
   END; $$
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION sp_disableClient(idP integer) RETURNS VOID AS $$  
	BEGIN
    	update Client set active = 0 where idNumber = idP;
    END;
$$ LANGUAGE 'plpgsql'; 

CREATE OR REPLACE FUNCTION  sp_getClient(idP integer)
RETURNS SETOF Client AS $$
   BEGIN
		RETURN QUERY SELECT * FROM Client where idNumber = idP;
   END; $$
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION sp_updateClient(idNumberP integer, nameP text, lastnameP text, birthP text, directionP text, statusP text, genderP integer, discountP float) RETURNS VOID AS $$  
	BEGIN
    	update Client set name=nameP, lastname=lastnameP, birth=birthP, direction=directionP, status=statusP, gender=genderP, discount=discountP where idNumber = idNumberP;
    END;
$$ LANGUAGE 'plpgsql'; 



-- ////////////////////////////////////// PRODUCT ////////////////////////////////////////////////////////////////



CREATE FUNCTION  sp_addProduct(nameP text, brandP text, familyP text, houseP text,typeP text, departmentP text,unitP text, taxP float) RETURNS INTEGER AS $$
   BEGIN
   		if exists(SELECT * FROM Product where name = nameP) then
            return 0;
      	else
            insert into Product(name, brand, family, house,type,department,active,register,unit,tax) values(nameP, brandP, familyP, houseP,typeP,departmentP,1,current_date,unitP,taxP);
        	return 1;
        end if;
   END;
$$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION  sp_getProducts()
RETURNS SETOF Product AS $$
   BEGIN
		RETURN QUERY SELECT * FROM Product where active = 1;
   END; $$
LANGUAGE 'plpgsql';


CREATE FUNCTION  sp_disableProduct(idP integer) RETURNS VOID AS $$ 
   BEGIN
   		update  Product set active = 0 where id = idP;
   END;
$$ LANGUAGE 'plpgsql';

CREATE FUNCTION  sp_updateProduct(idP integer,nameP text,brandP text, familyP text, houseP text,typeP text, departmentP text,unitP text, taxP float) RETURNS INTEGER AS $$  
   BEGIN
   		if exists(SELECT * FROM Product where id = idP) then
            update  Product set name = nameP, brand = brandP,family = familyP, house = houseP, type = typeP, department = departmentP, unit = unitP, tax = taxP where id = idP;
            return 1;
      	else
        	return 0;
        end if;
   END;
$$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION  sp_getProduct(idp integer)
RETURNS SETOF Product AS $$
   BEGIN
		RETURN QUERY SELECT * FROM Product where id = idp;
   END; $$
LANGUAGE 'plpgsql';


-- ////////////////////////////////////// STOCK ////////////////////////////////////////////////////////////

CREATE FUNCTION  sp_addStock(idProductP integer, amountP integer, minAmountP integer, maxAmountP integer,gravenP text) RETURNS INTEGER AS $$
   BEGIN
   		if exists(SELECT * FROM Stock where idProduct = idProductP) then
            return 0;
      	else
            insert into Stock(idProduct, amount, minAmount, maxAmount,graven,active) values(idProductP, amountP, minAmountP, maxAmountP,gravenP,1);
            insert into StockMovement(idProduct, amount, updated) values(idProductP, amountP, current_date); 
        	return 1;
        end if;
   END;
$$ LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION  sp_getProductsNoStock()
RETURNS SETOF Product AS $$
   BEGIN
		RETURN QUERY SELECT * FROM Product where active = 1 and id not in (SELECT idProduct FROM Stock); 
   END; $$
LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION  sp_getStocks()
RETURNS SETOF Stock AS $$
   BEGIN
		RETURN QUERY SELECT * FROM Stock where active = 1;
   END; $$
LANGUAGE 'plpgsql';

CREATE FUNCTION  sp_disableStock(idP integer) RETURNS VOID AS $$ 
   BEGIN
   		update  Stock set active = 0 where id = idP;
   END;
$$ LANGUAGE 'plpgsql';

CREATE FUNCTION  sp_updateStock(idP integer, amountP integer, minAmountP integer, maxAmountP integer,gravenP text) RETURNS INTEGER AS $$  
   BEGIN
   		if exists(SELECT * FROM Stock where id = idP) then
            update  Stock set amount = amountP, minAmount = minAmountP, maxAmount = maxAmountP, graven = gravenP where id = idP;
            return 1;
      	else
        	return 0;
        end if;
   END;
$$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION  sp_getStock(idp integer)
RETURNS SETOF Stock AS $$
   BEGIN
		RETURN QUERY SELECT * FROM Stock where id = idp;
   END; $$
LANGUAGE 'plpgsql';

CREATE FUNCTION  sp_stockMovement(idP integer, amountP integer, newAmountP integer) RETURNS VOID AS $$ 
   BEGIN
        update StockMovement set amount = newAmountP, updated = current_date where id = idP;
        update Stock set amount = amount + newAmountP where idProduct = idP;
        insert into StockMovementDetail(idProduct, lastAmount, newAmount) values(idP, amountP, newAmountP); 
   END;
$$ LANGUAGE 'plpgsql';